a <- matrix(c(2,3,5,7,11,13,17,19,23),3,3)
b <- solve(a)
a %*% b
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
xvec <- 1:10000
makeVector(xvec)
output <- makeVector(xvec)
output
cachemean(output)
cachemean(output)
x <- 1:10
makeVector(x)
cachemean(x)
x <- 1:500
makeVector(x)
cachemean(x)
x <- 1:10000
makeVector(x)
cachemean(x)
exa <- 1:10
makeVector(exa)
cachemean(exa)
x <- 1:10
output2 <- makeVector(x)
cachemean(output2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinv <- function(inv) im <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
# Takes product of makeCacheMatrix and ... ## Write a short comment describing this function
cacheSolve <- function(x, ...) {
im <- x$getinv() ## Return a matrix that is the inverse of 'x'
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinv(im)
im
}
a <- matrix(c(2,3,5,7,11,13,17,19,23),3,3)
outcome <- cacheSolve(a)
outcome <- makeCacheMatrix(a)
cacheSolve(outcome)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinv <- function(inv) im <<- inv
getinv <- function() im
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
# Takes product of makeCacheMatrix and ... ## Write a short comment describing this function
cacheSolve <- function(x, ...) {
im <- x$getinv() ## Return a matrix that is the inverse of 'x'
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinv(im)
im
}
outcome <- makeCacheMatrix(a)
cacheSolve(outcome)
solve(a)
cacheSolve(outcome)
c <- matrix(c(2,3,4,5),2,2)
outcome2 <- makeCacheMatrix(c)
cacheSolve(outcome2)
cacheSolve(outcome2)
d <- matrix(c(4,7,2,6),2,2)
d
d <- matrix(c(4,2,7,6),2,2)
d
outcome3 <- makeCacheMatrix(d)
cacheSolve(outcome3)
cacheSolve(outcome3)
cacheSolve(outcome2)
cacheSolve(outcome1)
cacheSolve(outcome)
d %*% cacheSolve(outcome3)
a %*% cacheSolve(outcome)
c %*% cacheSolve(outcome2)
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
for (i in 1:1000) {
x__ <- cacheSolve(x_)
}
x <- matrix(rnorm(160000),400,400)
for (i in 1:1000) {
x_ <- solve(x)
}
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getInv(),solve(x)))
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getinv(),solve(x)))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setInv <- function(Inv) im <<- Inv
getInv <- function() im
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
# Takes product of makeCacheMatrix and ... ## Write a short comment describing this function
cacheSolve <- function(x, ...) {
im <- x$getInv() ## Return a matrix that is the inverse of 'x'
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setInv(im)
im
}
d
outcome3 <- makeCacheMatrix(d)
cacheSolve(3)
cacheSolve(outcome3)
cacheSolve(outcome3) %*% d
d %*% cacheSolve(outcome3)
